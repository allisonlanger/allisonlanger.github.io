---
title: "CRI"
author: "Allison Langer"
date: "2023-06-30"
output:
  html_document:
    code_folding: "hide"
    number_sections: true
    toc: true
    toc_depth: 2
    toc_float: 
      collapsed: false
    df_print: paged
    knit: (function(inputFile, encoding) { 
      out_dir <- './';
      rmarkdown::render(inputFile,
                        encoding=encoding, 
                        output_file=file.path(dirname(inputFile), out_dir, 'index.html')) })
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Intro to R

## Downloading R:

R is a free data visualization and statistics software. You can download it here: <https://posit.co/download/rstudio-desktop/> You will need to download both R and R Studio. R serves as the hardware for your computer, and R studio is a user-friendly way to actually utilize all of the functions that R has to offer. Let's all download the latest version of R before moving on to data cleaning.

## Getting our data ready

We can input our data from our post-interaction survey right from excel. R is able to import data in many different formats. To get us ready to import our data to R, let's make a new excel file and call it "CRI" (for child robot interaction), and save it somewhere you can easily find it (desktop, for example). Let's copy paste all of the answer we have for the past participants and delete the extra rows for the pilot participants.

R doesn't like when we have spaces or special characters in our column names, so let's quickly change our columns to only include continuous strings, for example, change "Human Trust" to "Human_Trust", and so on. Repeat for all columns until no spaces or ? remain. Eventually, R will automatically treat each column as a unique variable.

At the end, our excel should look like this: ![](Screen%20Shot%202023-06-30%20at%203.37.29%20PM.png){width="413"}

A note on NA values: the packages we are using will automatically ignore NA values for us. In general, it's good to have a plan to "deal" with NAs, whether that is deleting an entire participant's data if they are missing any, or just delete per question. R has a way to do both of these, but we'll save that for another day!

# Get situated in R

We're ready to open R Studio, woo! There are a few key panes to understand in R. On the top right you have what's called the "Environment" in R, which essentially shows us what files we have open (for the moment, we have files). Below that on the bottom right, we can see folders on our individual computers on the first tab. Next to it, "Plots" is where any graphs will show up that we make. Next to that, "Packages" we can see what packages we have downloaded and running in R (more on this later).

In the center, we have the main window where we will right script, aka syntax, and below that we have the console, which will display our output. Think about it as a calculator, where if we type 2+2 in our script file, the answer will appear in our console.

In fact let's test that. Go ahead and type that out (2+2). Then highlight your text and press the "Run" button. Check below to see what our console displays.

```{r}
2+2
```

Now let's save this file before we begin the real coding. File --\> save --\> any name you want

## What's a package?

Packages in R are synonymous with libraries in other languages. They are more or less convenient short-cuts or functions someone else already programmed to save us some work.

Before they can be used, they must be installed, and you can do that pretty simply:

```         
  install.packages("PACKAGENAME")
  install.packages("ggpubr")
```

For our purposes, we are going to need the following packages: tidyverse, dplyr, readxl, lessR, and ggplot2

Fun(?) fact: The programmers of the the "lessR" package named it this because we literally have to do "less R" in order to produce more stuff!

Go ahead and try to install these using the install.packages command.

**install.packages("tidyverse")**

**install.packages("dplyr")**

**install.packages("readxl")**

**install.packages("lessR")**

**install.packages("ggplot2")**

After we install the packages, we can load them into our library using the "library" command. Go ahead and load these packages into your library.

**Loading packages code:**

```{r echo=TRUE, message=FALSE, warning=TRUE}
library(ggpubr)
library(tidyverse) #to view our data
library(dplyr) #to clean our data
library(readxl) #to read in excel file
library(lessR) #for our barcharts
library(ggplot2) #for a more complicated barchart
```

To check to make sure they are loaded, navigate over to the packages pane on righthand side of R Studio. Do you see a check mark for each package? then they're in!

![](images/Screen%20Shot%202023-07-05%20at%209.27.42%20AM.png){width="474"}

# Getting our data set up

## Loading Data

There are several ways to import data into R. The easiest way is to click file--\> import data set--\> from excel --\> locate excel file and load it. We can also do this using code. R has a "work directory" - a place on your computer that it calls home base. To find where that is for your computer, use the command "getwd()". You can change the working directory using "setwd()"place on your computer you want to access)". Let's see if we can use code to enter in the excel.

**Get and set working directory:**

```{r}
getwd()
#Set working directory to where you stored your excel file with the data
setwd("/Users/allisonlanger/Desktop")
```

**Loading and viewing our data file:**

```{r}
#naming the file "CRI" in R
CRI=read_excel('Preferences.xlsx')
data=read_excel('Preferences.xlsx')


#view the data
print(CRI)
```

The print function allows us to view our data, which should look very similar to an excel file. The top row is the labels of all of our columns or variables.

**Let's check the structure of our variables:**

```{r}
str(data)
str(data_group)
```

As we can see from the "str" structure command, R read the values in our data set as characters, but we need R to read the values as numbers. **Use the following code** to change characters to numbers, and repeat the "str" command to check our work:

```{r warning=FALSE}
CRI <- CRI %>% mutate_if(is.character, as.numeric)
str(CRI)
```

```{r}
library(hrbrthemes)

p <- data_group %>%
  ggplot( aes(x=sum, fill=group)) +
  geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
  scale_fill_manual(values=c("#404080", "#69b3a2")) +
  theme_ipsum() +
labs(title = "Distribution of Human and Robot Likability Scores",
     x = "Score",
     y = "Count of Values")
```


```{r}
p <- data_group %>%
  ggplot( aes(x=sum, fill=group)) +
  geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity', binwidth = 1) +
  scale_fill_manual(values=c("#69b3a2", "#0c4c8a")) +
  theme_ipsum() +
labs(title = "Distribution of Human and Robot Likability Scores",
     x = "Likability Score",
     y = "Count of Values")
p
```


# Graphing

## Graph 1: Would you like to play with Misty or the RA again?

Now let's make our first graph. **Use the code below to create a bargraph.** A weird quirk of the package we're using (lessR) is that the data needs to be named "d", so we'll just run a line of code to change that.

```{r}
#tell R that our CRI dataset is named "d"
d<-as.data.frame(CRI)

#use the "BarChart" function to make a barchart
BarChart(Misty_RA)
```

You can save the bar chart by using the "export" function in the plots window pane.

Notice this chart is fairly basic, and a general audience wouldn't know what "1" and "2" refer to in our data. Let's fix this by renaming our columns with more specific labels **using this code:**

```{r}
#Add labels for what "1" and "2" mean for this data column 
d$Misty_RA[d$Misty_RA=="1"]<-"Robot Instructor"
d$Misty_RA[d$Misty_RA=="2"]<-"Human Instructor"

#Look at Bar chart again
BarChart(Misty_RA)
```

Great, now we know what we're graphing! There are some other elements we can add to make it even more clear, and nicer to look at. **Copy the code below** to add various elements to our graph:

```{r}
#Add various elements to bar chart to make it prettier
BarChart(Misty_RA, 
         #color for bars
         fill =c("firebrick3", "dodgerblue3"), 
         #x-axis and y-axix labels ("lab")
         xlab = "Robot or Human Instructor", ylab = "Count", 
         #and graph title ("main")
         main = 'Would you like to play again with the Robot or Human Instructor?')

```

## Graph 2 & 3: Would you like to play with the RA/Misty or a friend from school?

Now you try! See if you can modify the code we just used to create a graph for the questions, (1) would you like to play with the RA or a friend from school, and (2) Misty and a friend from school. Try on your own before revealing the code below. For our color choices, use any of the following from the lessR package: "reds", "rusts", "browns", "olives", "greens", "emeralds", "turquoises", "aquas", "blues", "purples", "violets", "magentas", and "grays"

```{r}
d$RA_Friend[d$RA_Friend=="RA"]<-"Human Instructor"
d$RA_Friend[d$RA_Friend=="2"]<-"Friend"
BarChart(RA_Friend,
        fill =c("firebrick1", "firebrick3"), 
         xlab = "Human Instructor or friend?", 
         ylab = "Count", 
         main = 'Would you like to play with the Human Instructor or a Friend from School?')


d$Robot_Friend[d$Robot_Friend=="Misty"]<-"Robot Instructor"
d$Robot_Friend[d$Robot_Friend=="2"]<-"Friend"
BarChart(Robot_Friend, 
        fill =c("dodgerblue1", "dodgerblue3"), 
         xlab = "Robot Instructor or friend?", 
         ylab = "Count", 
         main = 'Would you like to play with the Robot Instructor or a Friend from School?')
```

## Graph 4: Post interaction questions

Finally, let's try to graph the means for the answer to our post-interaction questions. To do this, we're going to create a new data frame called "df_means", and use R as a calculator to calculate the means for each of our interaction questions (how much do you trust RA/Misty, etc.) and store it in this new data frame. View the code below for calculating the means for the "human" condition, and then see if you can code the robot means yourself before revealing the code.

**Human condition means code:**

```{r}
df_means<-NA
as.list(df_means)
df_means$humantrust<-mean(d$Human_Trust, na.rm=TRUE)
df_means$humanfriendly<-mean(d$Human_Friendly, na.rm=TRUE)
df_means$humanplay<-mean(d$Human_Play, na.rm=TRUE)
df_means$humansmart<-mean(d$Human_Smart, na.rm=TRUE)
```

**Robot condition means:**

```{r}
df_means$robottrust<-mean(d$Robot_Trust, na.rm=TRUE)
df_means$robotfriendly<-mean(d$Robot_Friendly, na.rm=TRUE)
df_means$robotplay<-mean(d$Robot_Play, na.rm=TRUE)
df_means$robotsmart<-mean(d$Robot_Smart, na.rm=TRUE)
```

Now we're going to do further data manipulation with the means we just calculated to tell R we have two conditions (Human and Robot), and 4 question-items. **Copy the code below** where we will store the new, ready-to-graph means in "df_means_graph".

```{r}
df_means_graph<-data.frame(Mean=c(df_means$humantrust, df_means$humanfriendly, df_means$humansmart, df_means$humanplay, df_means$robottrust, df_means$robotfriendly, df_means$robotsmart, df_means$robotplay),
			Condition=as.factor(c("Human Condition", "Human Condition","Human Condition", "Human Condition", "Robot Condition", "Robot Condition", "Robot Condition", "Robot Condition")),
			Item=c("Trust", "Friendly", "Smart", "Play Again", "Trust", "Friendly", "Smart", "Play Again"))
compare_means(humanplay ~ robotplay, data = df_means_graph)

```

We're going to use another package, "ggplot2" to graph these means. **Copy the plot code to graph our means.**

```{r}
plot<-ggplot(df_means_graph, aes(x=Item, y=Mean, fill=Condition)) + theme_minimal()+ 
  geom_bar(position=position_dodge(), stat="identity", colour='black')+scale_fill_manual(values=c("#69b3a2", "#0c4c8a")) 
plot

```

```{r}
getwd()
data_group=read_excel('group_data')
data_group<-readxl("/CRI/group_data")
compare_means(play ~ group, data = data_group)
compare_means(trust ~ group, data = data_group)
data_group$trust<-as.numeric(data_group$trust)
data_group$smart<-as.numeric(data_group$smart)
data_group$friend<-as.numeric(data_group$friend)

compare_means(friend ~ group, data = data_group)
compare_means(smart ~ group, data = data_group)
data_group$choice<-as.numeric(data_group$choice)
compare_means(choice ~ group, data = data_group)
compare_means(task ~ group, data = data_group)

p <- ggboxplot(data_group, x = "group", y = "play",
          color = "group", palette = "jco",
          add = "jitter")
#  Add p-value
p + stat_compare_means()
# Change method
p + stat_compare_means(method = "t.test")

ggbarplot(data_group, x = "group", y = "play", add = "mean_se")+
  stat_compare_means() +                                         # Global p-value
  stat_compare_means(ref.group = "0.5", label = "p.signif",
                     label.y = c(0,5))                   # compare to ref.group

ggbarplot(data_group, x = "group", y = "play", add = "mean_se",
          color = "group", palette = "jco", 
          position = position_dodge(0.8))+
  stat_compare_means(aes(group = group), label = "p.signif", label.y = 6)

ggbarplot(data_group, x = "group", y = "trust", add = "mean_se",
          color = "group", palette = "jco", 
          position = position_dodge(0.8))+
  stat_compare_means(aes(group = group), label = "p.signif", label.y = 6)

ggbarplot(data_group, x = "group", y = "friend", add = "mean_se",
          color = "group", palette = "jco", 
          position = position_dodge(0.8))+
  stat_compare_means(aes(group = group), label = "p.signif", label.y = 6)

ggbarplot(data_group, x = "group", y = "smart", add = "mean_se",
          color = "group", palette = "jco", 
          position = position_dodge(0.8))+
  stat_compare_means(aes(group = group), label = "p.signif", label.y = 6)

ggbarplot(data_group, x = "group", y = "choice", add = "mean_se",
          color = "group", palette = "jco", 
          position = position_dodge(0.8))+
  stat_compare_means(aes(group = group), label = "p.signif", label.y = 2)

df$Human_Friendly<-as.numeric(df$Human_Friendly)
df$Human_Trust<-as.numeric(df$Human_Trust)
df$Human_Smart<-as.numeric(df$Human_Smart)


df$Robot_Friendly<-as.numeric(df$Robot_Friendly)
df$Robot_Trust<-as.numeric(df$Robot_Trust)
df$Robot_Smart<-as.numeric(df$Robot_Smart)

wilcox.test(df$Human_Friendly, df$Robot_Friendly, paired=TRUE) 
wilcox.test(df$Human_Trust, df$Robot_Trust, paired=TRUE) 
wilcox.test(df$Human_Smart, df$Robot_Smart, paired=TRUE) 

```



# Takeaways

1.  R helps us clean data, calculate things, and graph/visualize things all in one place.

2.  R cannot do everything, but it's really useful at doing a lot of things, especially with the help of packages.

3.  Never be afraid to google something for R. Want to change the colors of our last plot? Google "ggplot bar graph colors" and you'll find code for it. Some good resources for more code are geeksforgeeks and stackoverflow

4.  R is a lot of trial and error. Errors are how we all get better at R!

5.  Once you get the hang of it, R can really simplify and make processes more efficient when working with data.
